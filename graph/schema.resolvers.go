package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"strconv"

	"github.com/nurhusni/go-graphql/graph/model"
	"github.com/nurhusni/go-graphql/internal/app/entity"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	err := r.UserService.CreateUser(ctx, entity.User{})
	if err != nil {
		return nil, err
	}

	checkNull := func(param *string) string {
		if param == nil {
			return ""
		}
		return *param
	}

	resp := model.User{
		Name:        input.Name,
		Email:       checkNull(input.Email),
		PhoneNumber: checkNull(input.PhoneNumber),
	}

	return &resp, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.GetUsers(ctx, entity.User{})
	if err != nil {
		return nil, err
	}

	resp := []*model.User{}
	for _, user := range users {
		resp = append(resp, &model.User{
			Name:        user.Name,
			Email:       user.Email,
			PhoneNumber: user.PhoneNumber,
		})
	}

	return resp, nil
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string, email *string) (*model.User, error) {
	checkNull := func(param *string) string {
		if param == nil {
			return ""
		}
		return *param
	}

	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}

	users, err := r.UserService.GetUsers(ctx, entity.User{
		ID:    idInt,
		Email: checkNull(email),
	})
	if err != nil {
		return nil, err
	}

	user := entity.User{}
	if len(users) > 0 {
		user = users[0]
	}

	return &model.User{
		ID:    fmt.Sprintf("%d", user.ID),
		Email: user.Email,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
